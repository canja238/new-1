classdef PathFollowingRobot < handle
    properties
        % Hardware Interface
        SerialPort
        
        % Navigation Properties
        Waypoints
        CurrentWaypointIndex
        FuzzySystem
        Running
        
        % Thresholds
        PositionThreshold = 5 % meters
        HeadingThreshold = 15 % degrees
        
        % Visualization
        MapFigure
        PathPlot
        RobotPlot
        WaypointPlot
        
        % Logging
        LogFile
        LogData
        LogStartTime
        
        % Performance Analysis
        PerformanceFigure
    end
    
    methods
        function obj = PathFollowingRobot(portName)
            % Initialize serial port
            obj.SerialPort = serialport(portName, 115200);
            configureTerminator(obj.SerialPort, "LF");
            flush(obj.SerialPort);
            
            % Define waypoints (latitude, longitude)
            obj.Waypoints = [
                7.214900000, 124.249231000;
                7.214907000, 124.249277111;
                7.214914000, 124.249323222;
                7.214921000, 124.249369333;
                7.214928000, 124.249415444;
                7.214935000, 124.249461556;
                7.214942000, 124.249507667;
                7.214949000, 124.249553778;
                7.214956000, 124.249599889;
                7.214963000, 124.249646000;
            ];
            
            obj.CurrentWaypointIndex = 1;
            obj.Running = false;
            
            % Initialize logging system
            obj.initializeLogging();
            
            % Initialize fuzzy logic controller
            obj.initializeFuzzySystem();
            
            % Initialize visualization
            obj.initializeMap();
            
            disp('Robot initialized and ready to run');
        end
        
        function initializeLogging(obj)
            % Create timestamped log file
            timestamp = datestr(now, 'yyyy-mm-dd_HH-MM-SS');
            obj.LogFile = sprintf('robot_log_%s.csv', timestamp);
            
            % Initialize log data structure
            obj.LogData = table('Size', [0, 11], ...
                'VariableTypes', {'datetime', 'double', 'double', 'double', 'double', ...
                                'double', 'double', 'double', 'double', 'double', 'double'}, ...
                'VariableNames', {'Time', 'Latitude', 'Longitude', 'Heading', ...
                                 'TargetLat', 'TargetLon', 'XError', 'YError', ...
                                 'HeadingError', 'Distance', 'Command'});
            
            % Write CSV header
            fid = fopen(obj.LogFile, 'w');
            fprintf(fid, 'Time,Latitude,Longitude,Heading,TargetLat,TargetLon,XError,YError,HeadingError,Distance,Command\n');
            fclose(fid);
            
            obj.LogStartTime = datetime('now');
        end
        
        function logData(obj, time, lat, lon, heading, targetLat, targetLon, ...
                        xError, yError, headingError, distance, command)
            % Add to in-memory table
            newRow = {time, lat, lon, heading, targetLat, targetLon, ...
                     xError, yError, headingError, distance, command};
            obj.LogData = [obj.LogData; newRow];
            
            % Append to CSV file
            fid = fopen(obj.LogFile, 'a');
            fprintf(fid, '%s,%.8f,%.8f,%.2f,%.8f,%.8f,%.4f,%.4f,%.2f,%.2f,%s\n', ...
                datestr(time, 'yyyy-mm-dd HH:MM:SS.FFF'), ...
                lat, lon, heading, targetLat, targetLon, ...
                xError, yError, headingError, distance, command);
            fclose(fid);
        end
        
        function initializeFuzzySystem(obj)
            fis = mamfis('Name', 'PathFollower');
            
            % Input 1: Cross-track error (meters)
            fis = addInput(fis, [-10 10], 'Name', 'XError');
            fis = addMF(fis, 'XError', 'trimf', [-10 -10 -5], 'Name', 'Left');
            fis = addMF(fis, 'XError', 'trimf', [-3 0 3], 'Name', 'Center');
            fis = addMF(fis, 'XError', 'trimf', [5 10 10], 'Name', 'Right');
            
            % Input 2: Heading error (degrees)
            fis = addInput(fis, [-180 180], 'Name', 'HeadingError');
            fis = addMF(fis, 'HeadingError', 'trimf', [-180 -180 -45], 'Name', 'Left');
            fis = addMF(fis, 'HeadingError', 'trimf', [-30 0 30], 'Name', 'Straight');
            fis = addMF(fis, 'HeadingError', 'trimf', [45 180 180], 'Name', 'Right');
            
            % Output 1: Left motor PWM
            fis = addOutput(fis, [-255 255], 'Name', 'LeftPWM');
            fis = addMF(fis, 'LeftPWM', 'trimf', [-255 -255 -127], 'Name', 'Reverse');
            fis = addMF(fis, 'LeftPWM', 'trimf', [-64 0 64], 'Name', 'Slow');
            fis = addMF(fis, 'LeftPWM', 'trimf', [127 255 255], 'Name', 'Forward');
            
            % Output 2: Right motor PWM
            fis = addOutput(fis, [-255 255], 'Name', 'RightPWM');
            fis = addMF(fis, 'RightPWM', 'trimf', [-255 -255 -127], 'Name', 'Reverse');
            fis = addMF(fis, 'RightPWM', 'trimf', [-64 0 64], 'Name', 'Slow');
            fis = addMF(fis, 'RightPWM', 'trimf', [127 255 255], 'Name', 'Forward');
            
            % Rule Base
            rules = [
                1 1 3 1 1 1;   % Far left, need left turn -> strong left, weak right
                1 2 3 2 1 1;    % Far left, going straight -> medium left, medium right
                1 3 1 3 1 1;    % Far left, need right turn -> weak left, strong right
                
                2 1 3 1 1 1;    % Center, need left turn -> strong left, weak right
                2 2 2 2 1 1;    % Center, going straight -> forward both
                2 3 1 3 1 1;    % Center, need right turn -> weak left, strong right
                
                3 1 3 3 1 1;    % Far right, need left turn -> strong left, strong right
                3 2 2 3 1 1;    % Far right, going straight -> medium left, medium right
                3 3 1 3 1 1;    % Far right, need right turn -> weak left, strong right
            ];
            
            fis = addRule(fis, rules);
            obj.FuzzySystem = fis;
            
            % Visualize fuzzy system
            mfFig = figure('Name', 'Fuzzy Membership Functions');
            subplot(2,2,1); plotmf(fis, 'input', 1); title('X Error');
            subplot(2,2,2); plotmf(fis, 'input', 2); title('Heading Error');
            subplot(2,2,3); plotmf(fis, 'output', 1); title('Left PWM');
            subplot(2,2,4); plotmf(fis, 'output', 2); title('Right PWM');
            
            surfFig = figure('Name', 'Control Surfaces');
            subplot(1,2,1); gensurf(fis, [1 2], 1); title('XError & HeadingError → LeftPWM');
            subplot(1,2,2); gensurf(fis, [1 2], 2); title('XError & HeadingError → RightPWM');
        end
        
        function initializeMap(obj)
            obj.MapFigure = figure('Name', 'Robot Navigation Map', 'NumberTitle', 'off');
            
            % Plot planned path
            [lat, lon] = obj.convertToNumeric(obj.Waypoints);
            geoplot(lat, lon, 'g-', 'LineWidth', 2, 'DisplayName', 'Planned Path');
            hold on;
            
            % Plot waypoints
            geoscatter(lat, lon, 'filled', 'MarkerFaceColor', 'red', 'DisplayName', 'Waypoints');
            
            % Initialize robot path and position markers
            obj.PathPlot = geoplot(lat(1), lon(1), 'b-', 'LineWidth', 1.5, 'DisplayName', 'Actual Path');
            obj.RobotPlot = geoscatter(lat(1), lon(1), 100, 'filled', 'MarkerFaceColor', 'blue', 'DisplayName', 'Robot');
            obj.WaypointPlot = geoscatter(lat(1), lon(1), 100, 'filled', 'MarkerFaceColor', 'yellow', 'DisplayName', 'Target');
            
            geobasemap('satellite');
            title('Robot Navigation Map');
            legend('Location', 'best');
            drawnow;
        end
        
        function updateMap(obj, currentLat, currentLon)
            % Update path history
            obj.PathPlot.LatitudeData = [obj.PathPlot.LatitudeData, currentLat];
            obj.PathPlot.LongitudeData = [obj.PathPlot.LongitudeData, currentLon];
            
            % Update robot position
            obj.RobotPlot.LatitudeData = currentLat;
            obj.RobotPlot.LongitudeData = currentLon;
            
            % Update target waypoint
            target = obj.Waypoints(obj.CurrentWaypointIndex, :);
            obj.WaypointPlot.LatitudeData = target(1);
            obj.WaypointPlot.LongitudeData = target(2);
            
            % Adjust view
            latLim = [min([currentLat; obj.Waypoints(:,1)])-0.0001, ...
                     max([currentLat; obj.Waypoints(:,1)])+0.0001];
            lonLim = [min([currentLon; obj.Waypoints(:,2)])-0.0001, ...
                     max([currentLon; obj.Waypoints(:,2)])+0.0001];
            geolimits(latLim, lonLim);
            
            drawnow;
        end
        
        function plotPerformance(obj)
            if height(obj.LogData) < 2
                disp('Not enough data for performance analysis');
                return;
            end
            
            obj.PerformanceFigure = figure('Name', 'Performance Analysis', 'NumberTitle', 'off');
            
            % Calculate elapsed time
            elapsedTime = seconds(obj.LogData.Time - obj.LogData.Time(1));
            
            % Plot 1: Position Errors
            subplot(3,1,1);
            plot(elapsedTime, obj.LogData.XError, 'r', 'DisplayName', 'X Error');
            hold on;
            plot(elapsedTime, obj.LogData.YError, 'b', 'DisplayName', 'Y Error');
            ylabel('Error (m)');
            title('Position Errors');
            legend;
            grid on;
            
            % Plot 2: Heading Error
            subplot(3,1,2);
            plot(elapsedTime, obj.LogData.HeadingError, 'g');
            ylabel('Degrees');
            title('Heading Error');
            grid on;
            
            % Plot 3: Distance to Target
            subplot(3,1,3);
            plot(elapsedTime, obj.LogData.Distance, 'm');
            ylabel('Distance (m)');
            xlabel('Elapsed Time (s)');
            title('Distance to Target');
            grid on;
            
            % Calculate metrics
            totalTime = elapsedTime(end);
            avgXError = mean(abs(obj.LogData.XError));
            avgYError = mean(abs(obj.LogData.YError));
            avgHeadingError = mean(abs(obj.LogData.HeadingError));
            
            % Display metrics
            annotation('textbox', [0.15, 0.85, 0.7, 0.1], 'String', ...
                sprintf('Total Time: %.1f s\nAvg X Error: %.2f m\nAvg Y Error: %.2f m\nAvg Heading Error: %.1f°', ...
                totalTime, avgXError, avgYError, avgHeadingError), ...
                'EdgeColor', 'none', 'FontSize', 10);
            
            % Save figure
            saveas(obj.PerformanceFigure, strrep(obj.LogFile, '.csv', '_performance.png'));
        end
        
        function start(obj)
            obj.Running = true;
            disp('Starting navigation...');
            obj.run();
        end
        
        function stop(obj)
            obj.Running = false;
            writeline(obj.SerialPort, "CMD:0,0");
            disp('Navigation stopped');
            
            % Generate performance report
            obj.plotPerformance();
            
            % Save final map
            saveas(obj.MapFigure, strrep(obj.LogFile, '.csv', '_map.png'));
        end
        
        function run(obj)
            while obj.Running
                if obj.SerialPort.NumBytesAvailable > 0
                    data = readline(obj.SerialPort);
                    
                    if startsWith(data, "GPS:")
                        try
                            gpsData = sscanf(data, "GPS:%f,%f,%f,%f");
                            if length(gpsData) == 4
                                currentTime = datetime('now');
                                currentLat = gpsData(1);
                                currentLon = gpsData(2);
                                heading = gpsData(4);
                                
                                % Update visualization
                                obj.updateMap(currentLat, currentLon);
                                
                                % Get current target
                                target = obj.Waypoints(obj.CurrentWaypointIndex, :);
                                targetLat = target(1);
                                targetLon = target(2);
                                
                                % Calculate errors (in meters)
                                [xError, yError] = obj.calculatePositionErrors(...
                                    currentLat, currentLon, targetLat, targetLon);
                                
                                % Calculate distance and heading error
                                distance = obj.calculateDistance(...
                                    currentLat, currentLon, targetLat, targetLon);
                                bearing = obj.calculateBearing(...
                                    currentLat, currentLon, targetLat, targetLon);
                                headingError = obj.wrapTo180(bearing - heading);
                                
                                % Fuzzy logic control
                                inputs = [xError, headingError];
                                outputs = evalfis(obj.FuzzySystem, inputs);
                                leftPWM = round(outputs(1));
                                rightPWM = round(outputs(2));
                                
                                % Reduce speed when close to target
                                if distance < 10
                                    speedFactor = max(0.3, distance/10);
                                    leftPWM = round(leftPWM * speedFactor);
                                    rightPWM = round(rightPWM * speedFactor);
                                end
                                
                                % Constrain PWM values
                                leftPWM = max(-255, min(255, leftPWM));
                                rightPWM = max(-255, min(255, rightPWM));
                                
                                % Log data
                                obj.logData(currentTime, currentLat, currentLon, heading, ...
                                           targetLat, targetLon, xError, yError, headingError, ...
                                           distance, sprintf('%d,%d', leftPWM, rightPWM));
                                
                                % Check waypoint arrival
                                if distance < obj.PositionThreshold && abs(headingError) < obj.HeadingThreshold
                                    if obj.CurrentWaypointIndex == size(obj.Waypoints, 1)
                                        obj.stop();
                                        return;
                                    else
                                        obj.CurrentWaypointIndex = obj.CurrentWaypointIndex + 1;
                                        fprintf('Reached waypoint %d, proceeding to next\n', obj.CurrentWaypointIndex-1);
                                        continue;
                                    end
                                end
                                
                                % Send motor command
                                cmdStr = sprintf("CMD:%d,%d", leftPWM, rightPWM);
                                writeline(obj.SerialPort, cmdStr);
                            end
                        catch ME
                            fprintf('Error processing GPS data: %s\n', ME.message);
                        end
                    end
                end
                pause(0.1);
            end
        end
        
        function [xError, yError] = calculatePositionErrors(obj, lat1, lon1, lat2, lon2)
            % Convert degree differences to meters
            xError = (lat2 - lat1) * 111320; % meters per degree latitude
            yError = (lon2 - lon1) * 111320 * cosd(lat1); % meters per degree longitude
        end
        
        function distance = calculateDistance(~, lat1, lon1, lat2, lon2)
            R = 6371000; % Earth radius in meters
            dLat = deg2rad(lat2-lat1);
            dLon = deg2rad(lon2-lon1);
            a = sin(dLat/2)^2 + cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * sin(dLon/2)^2;
            distance = R * 2 * atan2(sqrt(a), sqrt(1-a));
        end
        
        function bearing = calculateBearing(~, lat1, lon1, lat2, lon2)
            lat1 = deg2rad(lat1);
            lon1 = deg2rad(lon1);
            lat2 = deg2rad(lat2);
            lon2 = deg2rad(lon2);
            
            y = sin(lon2-lon1) * cos(lat2);
            x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1);
            bearing = rad2deg(atan2(y, x));
        end
        
        function angle = wrapTo180(~, angle)
            angle = mod(angle + 180, 360) - 180;
        end
        
        function delete(obj)
            if obj.Running
                obj.stop();
            end
            delete(obj.SerialPort);
        end
    end
end

% robot = PathFollowingRobot('COM3'); % Replace with your port
% robot.start();
